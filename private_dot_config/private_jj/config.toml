[talios]
protected_bookmarks = ["develop","main","master","tip"]

[user]
name = "Mark Derricutt"
email = "mark.derricutt@smxemail.com"

# override user.email for personal projects
[[--scope]]
--when.repositories = ["~/IdeaProjects/upstream/"]
[--scope.user]
email = "mark@talios.com"

[ui]
#diff-editor = "diffpatch"
#diff-editor = "diffedit3"
#diff-editor = "ksdiff"
default-command = "ls"
editor = "hx"
#editor = "zed -n -w"
merge-editor = "bcomp"

# merge-editor = [
#     "ksdiff",
#     "--merge",
#     "--output",
#     "$output",
#     "--base",
#     "$base",
#     "$left",
#     "$right",
# ]
#merge-editor =  ["mergiraf", "merge", "$base", "$left", "$right", "-o", "$output", "--fast"]
log-word-wrap = false
log-synthetic-elided-nodes = true
#graph.style = "square"
#diff.tool = ["delta", "--dark", "--diff-stat-align-width=80"]
diff-formatter = "difft"
diff-args = ["--tab-width=2", "--color=always", "$left", "$right"]

pager = { command = ["less", "-FRX"], env = { LESSCHARSET = "utf-8" } }

# Options: diff, snapshot, git
conflict-marker-style = "git"

# https://github.com/jj-vcs/jj/pull/3129
[experimental-advance-branches]
enabled-branches = ["glob:*"]
disabled-branches = ["main", "master", "develop", "tip"]

[git]
private-commits = "description(glob:'wip:*') | description(glob:'private:*')"

[snapshot]
auto-update-stale = true

[gerrit]
enabled = true
default-remote = 'gerrit'
default-remote-branch = "develop"


[merge-tools.bcomp]
program = "bcomp"
merge-args = ["-automerge", "-reviewconflicts", "$left", "$right", "$base", "$output"]

[merge-tools.diffedit3]
program = "diffedit3"
edit-args = ["$left", "$right", "$output"]

[merge-tools.mergiraf]
program = "mergiraf"
merge-args = ["merge", "$base", "$left", "$right", "-o", "$output", "--fast"]
merge-conflict-exit-codes = [1]
conflict-marker-style = "git"

[template-aliases]
'render_bookmarks(bookmarks)' = '''
bookmarks.map(|b|
  if(config("talios.protected_bookmarks").as_string_list().filter(|s| s.contains(b.name())),
  label("protected_bookmark", b), b))
'''

'describe_with_diff(commit, description)' = '''
if(description,
  description.first_line(),
  label(
    if(empty, "empty"),
    description_placeholder ++ "\n" ++ commit.diff().summary())
)
'''

custom_log_summary = '''
if(root,
  format_root_commit(self),
  label(if(current_working_copy, "working_copy"),
    concat(
      separate(" ",
        format_short_change_id_with_hidden_and_divergent_info(self),
        format_short_commit_id(commit_id),
        if(author.email(), author.email().local(), email_placeholder),
        if(conflict, label("conflict", "conflict")),
        if(config("ui.show-cryptographic-signatures").as_boolean(),
          format_short_cryptographic_signature(signature)),
        if(empty, label("empty", "(empty)")),

        describe_with_diff(self, description),
        render_bookmarks(bookmarks),

        tags,
        working_copies,
        if(git_head, label("git_head", "git_head()")),

      ) ++ "\n",
    ),
  )
)
'''

[templates]
git_push_bookmark = '"feature/" ++ change_id.short()'

# git_push_bookmark = '''
# if(
#   trailers.filter(|t| t.key() == "Closes").len() != 1,
#   "feature/" ++ change_id.short(),
#   concat("feature/", trailers.filter(|t| t.key() == "Closes").map(|t| t.value()).join(""), "-", change_id.shortest(4))
# )
# '''

# if(config("issue").as_string(), config("issue").as_string() ++ " "),
draft_commit_description = '''
concat(
   description,
   surround(
     "\nJJ: This commit contains the following changes:\n", "",
     indent("JJ:     ", diff.stat(200)),
   ),
   surround("\nJJ: Diff:\n", "", indent("JJ:  ", diff.git(4)))
)
'''

# commit_trailers = '''
# concat(
#   if(config("issue").as_string(), "Issue: " ++ config("issue").as_string() ++ "\n"),
#   if(!trailers.contains_key("Change-Id"), format_gerrit_change_id_trailer(self))
# )
# '''

commit_trailers = '''
if(!trailers.contains_key("Change-Id"), format_gerrit_change_id_trailer(self))
'''

[colors]
"node" = { bold = true }
"node elided" = { fg = "bright black" }
"node working_copy" = { fg = "green" }
"node conflicted" = { fg = "red" }
"node immutable" = { fg = "bright cyan" }
"node wip" = { fg = "yellow" }
"node normal" = { bold = false }
"commit_id prefix" = { bold = true }
"tags" = { fg = "green" }
"bookmarks" = { fg = "blue" }
"normal change_id" = { bold = true, fg = "magenta" }
"immutable change_id" = { bold = false, fg = "bright cyan" }
"protected_bookmark" = { bold = true, fg = "bright yellow" }

[aliases]
# jj run - https://github.com/neongreen/jj-run
x = ["util", "exec", "--", "uvx", "git+https://github.com/neongreen/jj-run.git"]

ls = ["log", "-T", "custom_log_summary"]
ll = ["log", "-T", "builtin_log_detailed"]
ld = ["log", "-T", "custom_log_summary", "-r", "develop::"]
le = ["log", "-T", "custom_log_summary", "-r", "undescribed()"]

# Get all open stacks of work
open = ["log", "-r", "open()"]

changes = ["log", "-T", "custom_log_summary"]
sync-trunk = [
    "rebase",
    "--skip-emptied",
    "-s",
    "roots(trunk()..)",
    "-d",
    "trunk()",
]
sync = [
    "rebase",
    "--skip-emptied",
    "-s",
    "roots(develop..)",
    "-d",
    "develop",
]
sync-features = [
    "rebase",
    "--skip-emptied",
    "-b",
    "bookmarks(glob:\"feature*\")",
    "-d",
    "develop",
]
sync-main = [
    "rebase",
    "--skip-emptied",
    "-b",
    "bookmarks(glob:\"feature*\")",
    "-d",
    "main",
]
tug = [
    "bookmark",
    "move",
    "--from",
    "closest_bookmark(@)",
    "--to",
    "closest_pushable(@)",
]
#baseb = ["log", "--no-graph", "-r@-", "-Tlocal_bookmarks"]
baseb = ["util", "exec", "--", "bash", "-c", """
  echo $(jj log -r@- -T 'bookmarks' --no-graph | cut -d ' ' -f 1)
"""]

[root]
bookmark = "develop"

[revsets]
#log = "(trunk()..@):: | (trunk()..@)-"
log = "present(@) | ancestors(immutable_heads().., 3) | present(trunk())"
# log-graph-prioritize = "present(@)"
log-graph-prioritize = 'coalesce(megamerge(), trunk())'

[revset-aliases]
'closest_bookmark(to)' = 'heads(::to & bookmarks())'
'closest_pushable(to)' = 'heads(::to & ~description(exact:"") & (~empty() | merges()))'
'undescribed()' = 'mutable() & mine() & description(exact:"")'

'user(x)' = 'author(x) | committer(x)'

'mine()' = 'user("mark.derricutt@smxemail.com") | user("mark@talios.com")'

# stack(x, n) is the set of mutable commits reachable from 'x', with 'n'
# parents. 'n' is often useful to customize the display and return set for
# certain operations. 'x' can be used to target the set of 'roots' to traverse,
# e.g. @ is the current stack.
'stack()' = 'stack(@)'
'stack(x)' = 'stack(x, 2)'
'stack(x, n)' = 'ancestors(reachable(x, mutable()), n)'

# The current set of "open" works. It is defined as: all stacks that are
# reachable from my working copy, or any other commit I wrote.
# n = 1, meaning that nothing from `trunk()` is included, so all resulting
# commits are mutable by definition.
'open()' = 'stack(mine() | @, 1)'

# Find the megamerge. Mostly useful in combination with other aliases, primarily
# 'sandwich'. Normally when there's only one megamerge, sandwich works perfectly
# fine and is basically "magic". However, there are more complex cases; consider
# something like this which represents a forked repository of an upstream:
#
#
#    ----> P1 ... Pn -----------\
#   /                            \
#  /---> X --\           (main)   \
# B          M1 --> T1 ... Tn --> M2 --> @
#  \---> Y --/
#
# X and Y are typical features on top of base B, combined inside megamerge M1.
# However, we may want changes T1...Tn to go on top of M1, because (in my case)
# they're custom and will never go upstream, but are correctly published as part
# of the fork; Tn is where the main bookmark points. Finally, we have changes P1
# ... Pn which are private and should never be pushed upstream at all.
#
# In this case, sandwich will work poorly because 'reachable(stack(), merges())'
# will resolve to {M1, M2}, which is not what we want for 'rebase -B'. So to
# handle that case, we allow the user to specify the merge via literal tag
# "megamerge". In this case if we 'bookmark set megamerge -r M1' then sandwich
# will always work correctly.
#
# From: https://github.com/thoughtpolice/a/blob/canon/tilde/aseipp/dotfiles/jj/config.toml
'megamerge()' = 'coalesce(present(megamerge), reachable(stack(), merges()))'


[gg.queries]
# Number of commits to load per call
log-page-size = 1000

# Some query settings will default to false instead of true if a repo has this many commits.
large-repo-heuristic = 100000

# Take a snapshot when the window gains focus; slow in large checkouts.
# When disabled, snapshots will still be created if you run commands.
# auto-snapshot =

[gg.ui]
# Stores a list of recently opened directories for shell integration
recent-workspaces = []

[fix.tools.spotless]
command = ["spotless-file", "$path"]
patterns = ["glob:'**/*.java'"]

# When set, bookmarks that are local-only or remote-only will be visually indicated.
mark-unpushed-bookmarks = true

[vizjj.ui]
recent-workspaces = ["/Users/amrk/IdeaProjects/securemx/smx-migration-web", "/Users/amrk/IdeaProjects/securemx/smx3/selfrelease/selfrelease-java-func", "/Users/amrk/IdeaProjects/securemx/smx3/smx3-ui", "/Users/amrk/IdeaProjects/securemx/smx3/smx3.invoicing"]
font-size = 14

# "light" or "dark". If not set, your OS settings will be used.
# theme-override = "light"
#
